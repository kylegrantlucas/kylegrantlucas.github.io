{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _commands = require('./commands');\n\nvar BaseCommands = _interopRequireWildcard(_commands);\n\nvar _bash = require('./bash');\n\nvar _bash2 = _interopRequireDefault(_bash);\n\nvar _styles = require('./styles');\n\nvar _styles2 = _interopRequireDefault(_styles);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar CTRL_CHAR_CODE = 17;\nvar L_CHAR_CODE = 76;\nvar C_CHAR_CODE = 67;\nvar UP_CHAR_CODE = 38;\nvar DOWN_CHAR_CODE = 40;\nvar TAB_CHAR_CODE = 9;\n\nvar noop = function noop() {};\n\nvar Terminal = function (_Component) {\n  _inherits(Terminal, _Component);\n\n  function Terminal(_ref) {\n    var history = _ref.history,\n        structure = _ref.structure,\n        extensions = _ref.extensions,\n        settings = _ref.settings;\n\n    _classCallCheck(this, Terminal);\n\n    var _this = _possibleConstructorReturn(this, (Terminal.__proto__ || Object.getPrototypeOf(Terminal)).call(this));\n\n    _this.Bash = new _bash2.default(extensions);\n    _this.ctrlPressed = false;\n    _this.state = {\n      settings: settings,\n      history: history.slice(),\n      structure: Object.assign({}, structure),\n      cwd: ''\n    };\n    _this.handleKeyDown = _this.handleKeyDown.bind(_this);\n    _this.handleKeyUp = _this.handleKeyUp.bind(_this);\n    return _this;\n  }\n\n  _createClass(Terminal, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.refs.input.focus();\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(_ref2) {\n      var extensions = _ref2.extensions,\n          structure = _ref2.structure,\n          history = _ref2.history;\n      var updatedState = {};\n\n      if (structure) {\n        updatedState.structure = Object.assign({}, structure);\n      }\n\n      if (history) {\n        updatedState.history = history.slice();\n      }\n\n      if (extensions) {\n        this.Bash.commands = Object.assign({}, BaseCommands, extensions);\n      }\n\n      this.setState(updatedState);\n    }\n    /*\n     * Utilize immutability\n     */\n\n  }, {\n    key: 'shouldComponentUpdate',\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      return this.state !== nextState || this.props !== nextProps;\n    }\n    /*\n     * Keep input in view on change\n     */\n\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      this.refs.input.scrollIntoView();\n    }\n    /*\n     * Forward the input along to the Bash autocompleter. If it works,\n     * update the input.\n     */\n\n  }, {\n    key: 'attemptAutocomplete',\n    value: function attemptAutocomplete() {\n      var input = this.refs.input.value;\n      var suggestion = this.Bash.autocomplete(input, this.state);\n\n      if (suggestion) {\n        this.refs.input.value = suggestion;\n      }\n    }\n    /*\n     * Handle keydown for special hot keys. The tab key\n     * has to be handled on key down to prevent default.\n     * @param {Event} evt - the DOM event\n     */\n\n  }, {\n    key: 'handleKeyDown',\n    value: function handleKeyDown(evt) {\n      if (evt.which === CTRL_CHAR_CODE) {\n        this.ctrlPressed = true;\n      } else if (evt.which === TAB_CHAR_CODE) {\n        // Tab must be on keydown to prevent default\n        this.attemptAutocomplete();\n        evt.preventDefault();\n      }\n    }\n    /*\n     * Handle keyup for special hot keys.\n     * @param {Event} evt - the DOM event\n     *\n     * -- Supported hot keys --\n     * ctrl + l : clear\n     * ctrl + c : cancel current command\n     * up - prev command from history\n     * down - next command from history\n     * tab - autocomplete\n     */\n\n  }, {\n    key: 'handleKeyUp',\n    value: function handleKeyUp(evt) {\n      if (evt.which === L_CHAR_CODE) {\n        if (this.ctrlPressed) {\n          this.setState(this.Bash.execute('clear', this.state));\n        }\n      } else if (evt.which === C_CHAR_CODE) {\n        if (this.ctrlPressed) {\n          this.refs.input.value = '';\n        }\n      } else if (evt.which === UP_CHAR_CODE) {\n        if (this.Bash.hasPrevCommand()) {\n          this.refs.input.value = this.Bash.getPrevCommand();\n        }\n      } else if (evt.which === DOWN_CHAR_CODE) {\n        if (this.Bash.hasNextCommand()) {\n          this.refs.input.value = this.Bash.getNextCommand();\n        } else {\n          this.refs.input.value = '';\n        }\n      } else if (evt.which === CTRL_CHAR_CODE) {\n        this.ctrlPressed = false;\n      }\n    }\n  }, {\n    key: 'handleSubmit',\n    value: function handleSubmit(evt) {\n      evt.preventDefault(); // Execute command\n\n      var input = evt.target[0].value;\n      var newState = this.Bash.execute(input, this.state);\n      this.setState(newState);\n      this.refs.input.value = '';\n    }\n  }, {\n    key: 'renderHistoryItem',\n    value: function renderHistoryItem(style) {\n      var _this2 = this;\n\n      return function (item, key) {\n        var prefix = item.hasOwnProperty('cwd') ? _react2.default.createElement('span', {\n          style: style.prefix\n        }, _this2.props.prefix + ' ~' + item.cwd + ' $') : undefined;\n        return _react2.default.createElement('div', {\n          'data-test-id': 'history-' + key,\n          key: key\n        }, prefix, item.value);\n      };\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this3 = this;\n\n      var _props = this.props,\n          onClose = _props.onClose,\n          onExpand = _props.onExpand,\n          onMinimize = _props.onMinimize,\n          prefix = _props.prefix,\n          styles = _props.styles,\n          theme = _props.theme;\n      var _state = this.state,\n          history = _state.history,\n          cwd = _state.cwd;\n      var style = Object.assign({}, _styles2.default[theme] || _styles2.default.light, styles);\n      return _react2.default.createElement('div', {\n        className: 'ReactBash',\n        style: style.ReactBash\n      }, _react2.default.createElement('div', {\n        style: style.header\n      }, _react2.default.createElement('span', {\n        style: style.redCircle,\n        onClick: onClose\n      }), _react2.default.createElement('span', {\n        style: style.yellowCircle,\n        onClick: onMinimize\n      }), _react2.default.createElement('span', {\n        style: style.greenCircle,\n        onClick: onExpand\n      })), _react2.default.createElement('div', {\n        style: style.body,\n        onClick: function onClick() {\n          return _this3.refs.input.focus();\n        }\n      }, history.map(this.renderHistoryItem(style)), _react2.default.createElement('form', {\n        onSubmit: function onSubmit(evt) {\n          return _this3.handleSubmit(evt);\n        },\n        style: style.form\n      }, _react2.default.createElement('span', {\n        style: style.prefix\n      }, prefix + ' ~' + cwd + ' $'), _react2.default.createElement('input', {\n        autoComplete: 'off',\n        onKeyDown: this.handleKeyDown,\n        onKeyUp: this.handleKeyUp,\n        ref: 'input',\n        style: style.input\n      }))));\n    }\n  }]);\n\n  return Terminal;\n}(_react.Component);\n\nexports.default = Terminal;\nTerminal.Themes = {\n  LIGHT: 'light',\n  DARK: 'dark',\n  SOLARIZED: 'solarized'\n};\nTerminal.propTypes = {\n  extensions: _propTypes2.default.object,\n  history: _propTypes2.default.array,\n  onClose: _propTypes2.default.func,\n  onExpand: _propTypes2.default.func,\n  onMinimize: _propTypes2.default.func,\n  prefix: _propTypes2.default.string,\n  structure: _propTypes2.default.object,\n  styles: _propTypes2.default.object,\n  theme: _propTypes2.default.string,\n  settings: _propTypes2.default.object\n};\nTerminal.defaultProps = {\n  extensions: {},\n  history: [],\n  onClose: noop,\n  onExpand: noop,\n  onMinimize: noop,\n  prefix: 'hacker@default',\n  structure: {},\n  styles: {},\n  theme: Terminal.Themes.LIGHT\n};","map":null,"metadata":{},"sourceType":"script"}